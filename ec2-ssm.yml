AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 instance with SSM access and code-server setup

Parameters:
  UserName:
    Type: String
    Description: User name to prevent resource naming conflicts (max 20 characters)

  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, stg, prod]
    Description: Environment name (dev/stg/prod)

  InstanceType:
    Type: String
    Default: c7i.xlarge
    Description: EC2 instance type

  HomeFolder:
    Type: String
    Description: The home folder in the VSCodeInstance
    Default: /home/ubuntu/Workshop

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
  EbsVolumeSize:
    Type: Number
    Default: 50
    Description: Size of EBS volume in GB
    MinValue: 8
    MaxValue: 16384

  KeyPairName:
    Type: String
    Default: ""
    Description: (Optional) Name of an existing EC2 KeyPair to enable SSH access to the instance

  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR block for the first public subnet
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the second public subnet
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  AllowedIpRange:
    Type: String
    Default: 0.0.0.0/0
    Description: The IP address range that can access the instance via Session Manager
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

Conditions:
  HasKeyPair: !Not [!Equals [!Ref KeyPairName, ""]]

Mappings:
  # aws ec2 describe-managed-prefix-lists  --region <REGION> | jq -r '.PrefixLists[] | select (.PrefixListName == "com.amazonaws.global.cloudfront.origin-facing") | .PrefixListId'
  AWSRegions2PrefixListID:
    ap-northeast-1:
      PrefixList: pl-58a04531
    ap-northeast-2:
      PrefixList: pl-22a6434b
    ap-south-1:
      PrefixList: pl-9aa247f3
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ca-central-1:
      PrefixList: pl-38a64351
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-north-1:
      PrefixList: pl-fab65393
    eu-west-1:
      PrefixList: pl-4fa04526
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-3:
      PrefixList: pl-75b1541c
    sa-east-1:
      PrefixList: pl-5da64334
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb

Resources:
  ########### VPC Resources ###########

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${UserName}-${Environment}

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${UserName}-PublicSubnet
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${UserName}-PrivateSubnet
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${UserName}-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${UserName}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${UserName}-PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: Allow HTTP from com.amazonaws.global.cloudfront.origin-facing
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId:
            !FindInMap [AWSRegions2PrefixListID, !Ref "AWS::Region", PrefixList]
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref AllowedIpRange
          Description: Allow all outbound traffic by default
      Tags:
        - Key: Name
          Value: !Sub ${UserName}-${Environment}-sg

  ########### SSM Resources ###########

  SSMLogBucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logs aren't needed for this bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  VSCodeInstanceSSMDoc:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: Bootstrap VSCode code-server instance
        parameters:
          architecture:
            type: String
            default: amd64
            description: Instance architecture type
            allowedValues:
              - arm64
              - amd64
          ubuntuVersion:
            type: String
            default: jammy
            allowedValues:
              - focal
              - bionic
              - jammy
          nodeVersion:
            type: String
            default: node_20.x
        mainSteps:
          - action: aws:runShellScript
            name: InstallBasePackages
            inputs:
              runCommand:
                - apt-get update
                - DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common build-essential curl unzip
          - action: aws:runShellScript
            name: InstallAWSCLI
            inputs:
              runCommand:
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl unzip wget htop
                - curl -fsSL https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip -o /tmp/aws-cli.zip
                - unzip -q -d /tmp /tmp/aws-cli.zip
                - sudo /tmp/aws/install
                - rm -rf /tmp/aws
                - aws --version
          - action: aws:runShellScript
            name: InstallGit
            inputs:
              runCommand:
                - add-apt-repository ppa:git-core/ppa
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y git
                - sudo -u ubuntu git config --global user.email "participant@workshops.aws"
                - sudo -u ubuntu git config --global user.name "Workshop Participant"
                - sudo -u ubuntu git config --global init.defaultBranch "main"
                - git --version
          - action: aws:runShellScript
            name: InstallNode
            inputs:
              runCommand:
                - curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | gpg --dearmor -o /usr/share/keyrings/nodesource-keyring.gpg
                - echo "deb [arch={{ architecture }} signed-by=/usr/share/keyrings/nodesource-keyring.gpg] https://deb.nodesource.com/{{ nodeVersion }} {{ ubuntuVersion }} main" >> /etc/apt/sources.list.d/nodesource.list
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y nodejs
          - action: aws:runShellScript
            name: InstallPython
            inputs:
              runCommand:
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y python3-pip python3.10-venv python3-boto3 python3-pytest
                - python3 --version
                - pip3 --version
          - action: aws:runShellScript
            name: InstallPackages
            inputs:
              runCommand:
                - "#!/bin/bash"
                - DEBIAN_FRONTEND=noninteractive apt-get -y install sqlite telnet jq strace tree gcc gettext bash-completion
                - sudo npm install -g npm
                - sudo npm install -g aws-cdk
                - echo "complete -C '/usr/local/bin/aws_completer' aws" >> /home/ubuntu/.bashrc
                - echo 'PATH=$PATH:/usr/local/bin' >> /home/ubuntu/.bashrc
                - echo 'export PATH' >> /home/ubuntu/.bashrc
                - !Sub echo 'export AWS_REGION=${AWS::Region}' >> /home/ubuntu/.bashrc
                - !Sub echo 'export AWS_ACCOUNTID=${AWS::AccountId}' >> /home/ubuntu/.bashrc
                - !Sub echo 'export NEXT_TELEMETRY_DISABLED=1' >> /home/ubuntu/.bashrc
                - !Sub echo 'export CLOUDFRONT_URL=http://${VSCodeServerDistribution.DomainName}' >> /home/ubuntu/.bashrc
          - action: aws:runShellScript
            name: ConfigureCodeServer
            inputs:
              runCommand:
                - export HOME=/home/ubuntu
                - curl -fsSL https://code-server.dev/install.sh | sh
                - sudo systemctl enable --now code-server@ubuntu
                - DEBIAN_FRONTEND=noninteractive sudo apt-get install -y nginx
                - !Sub |
                  sudo tee /etc/nginx/sites-available/code-server <<EOF
                  server {
                      listen 80;
                      listen [::]:80;
                      server_name ${VSCodeServerDistribution.DomainName};

                      location / {
                        proxy_pass http://localhost:8080/;
                        proxy_set_header Host \$host;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection upgrade;
                        proxy_set_header Accept-Encoding gzip;
                      }
                      location /Workshop {
                        proxy_pass http://localhost:8081/Workshop;
                        proxy_set_header Host \$host;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection upgrade;
                        proxy_set_header Accept-Encoding gzip;
                      }
                  }
                  EOF
                - |
                  sudo tee /home/ubuntu/.config/code-server/config.yaml <<EOF
                  cert: false
                  auth: password
                  hashed-password: "$(echo -n $(aws sts get-caller-identity --query "Account" --output text) | sudo npx argon2-cli -e)"
                  EOF
                - sudo -u ubuntu --login mkdir -p /home/ubuntu/.local/share/code-server/User/
                - sudo -u ubuntu --login touch /home/ubuntu/.local/share/code-server/User/settings.json
                - !Sub |
                  sudo tee /home/ubuntu/.local/share/code-server/User/settings.json <<EOF
                  {
                    "extensions.autoUpdate": false,
                    "extensions.autoCheckUpdates": false,
                    "terminal.integrated.cwd": "${HomeFolder}",
                    "telemetry.telemetryLevel": "off",
                    "security.workspace.trust.startupPrompt": "never",
                    "security.workspace.trust.enabled": false,
                    "security.workspace.trust.banner": "never",
                    "security.workspace.trust.emptyWindow": false,
                    "[python]": {
                      "editor.defaultFormatter": "ms-python.black-formatter",
                      "editor.formatOnSave": true
                    },
                    "auto-run-command.rules": [
                      {
                        "command": "workbench.action.terminal.new"
                      }
                    ]
                  }
                  EOF
                - sudo systemctl restart code-server@ubuntu
                - sudo ln -s ../sites-available/code-server /etc/nginx/sites-enabled/code-server
                - sudo systemctl restart nginx
                - sudo -u ubuntu --login code-server --install-extension synedra.auto-run-command --force
                - sudo chown ubuntu:ubuntu /home/ubuntu -R
                # Required library to use "Computer Use"
                - DEBIAN_FRONTEND=noninteractive sudo apt-get install -y libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libdrm2 libexpat1 libgbm1 libglib2.0-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libudev1 libuuid1 libx11-6 libx11-xcb1 libxcb-dri3-0 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxkbcommon0 libxrandr2 libxrender1 libxshmfence1 libxss1 libxtst6
                # Prevent puppeteer from being garbled
                - DEBIAN_FRONTEND=noninteractive sudo apt-get install -y fonts-ipafont fonts-ipaexfont
          - action: aws:runShellScript
            name: FixExtentionSetting
            inputs:
              runCommand:
                - "#!/bin/bash"
                - "if ! command -v jq &> /dev/null; then"
                - "    apt-get update && apt-get install -y jq || yum install -y jq"
                - "fi"
                - "PRODUCT_JSON_PATH=\"/usr/lib/code-server/lib/vscode/product.json\""
                - "[ ! -f \"$PRODUCT_JSON_PATH\" ] && exit 1"
                - "cp \"$PRODUCT_JSON_PATH\" \"${PRODUCT_JSON_PATH}.bak\""
                - "if jq -e 'has(\"extensionsGallery\")' \"$PRODUCT_JSON_PATH\" >/dev/null; then exit 0; fi"
                - "jq '. + {extensionsGallery: {serviceUrl: \"https://marketplace.visualstudio.com/_apis/public/gallery\", itemUrl: \"https://marketplace.visualstudio.com/items\"}}' \"$PRODUCT_JSON_PATH\" > \"${PRODUCT_JSON_PATH}.tmp\""
                - "[ $? -ne 0 ] && exit 1"
                - "mv \"${PRODUCT_JSON_PATH}.tmp\" \"$PRODUCT_JSON_PATH\""
                - "jq empty \"$PRODUCT_JSON_PATH\" || (mv \"${PRODUCT_JSON_PATH}.bak\" \"$PRODUCT_JSON_PATH\"; exit 1)"
                - "echo \"Update Successfull\""
          - action: aws:runShellScript
            name: InstallExtension
            inputs:
              runCommand:
                - |
                  #!/bin/bash
                  EXTENSIONS=("saoudrizwan.claude-dev" "ritwickdey.LiveServer")

                  for ext in "${EXTENSIONS[@]}"; do
                    sudo -u ubuntu code-server --install-extension "$ext" || exit 1
                  done

  VSCodeInstanceSSMAssociation:
    Type: AWS::SSM::Association
    DependsOn: EC2Instance
    Properties:
      Name: !Ref VSCodeInstanceSSMDoc
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref SSMLogBucket
          OutputS3KeyPrefix: bootstrap
      Targets:
        - Key: tag:SSMBootstrap
          Values:
            - True

  ########### Custom Resources ###########

  SSMLambdaExecutionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Describe Action doesn't support any resource condition
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub SSMLambdaPolicy-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:ListCommandInvocations
                  - ssm:GetCommandInvocation
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:DeleteBucket
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${SSMLogBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${SSMLogBucket}/*

  VSCodeInstanceBootstrapInstanceLambda:
    Type: Custom::VSCodeInstanceBootstrapInstanceLambda
    DependsOn:
      - SSMLambdaExecutionRole
    Properties:
      Tags:
        - Key: auto-delete
          Value: never
      ServiceToken:
        Fn::GetAtt:
          - VSCodeInstanceBootstrapLambdaFunction
          - Arn
      Region:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      InstanceId:
        Ref: EC2Instance
      SSMDocumentName:
        Ref: VSCodeInstanceSSMDoc
      SSMLogBucket:
        Ref: SSMLogBucket

  VSCodeInstanceBootstrapLambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: SSMLambdaExecutionRole has the AWSLambdaBasicExecutionRole managed policy attached, allowing writing to CloudWatch logs
          - id: W89
            reason: Bootstrap function does not need the scaffolding of a VPC or provisioned concurrency
          - id: W92
            reason: Bootstrap function does not need provisioned concurrency
    Properties:
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - SSMLambdaExecutionRole
          - Arn
      Runtime: python3.9
      MemorySize: 128
      Timeout: 600
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          import logging

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          s3 = boto3.resource('s3')
          ssm = boto3.client('ssm')

          def lambda_handler(event, context):
              logger.info("event: {}".format(event))
              logger.info("context: {}".format(context))
              responseData = {}

              if event["RequestType"] == "Create":
                  try:
                      instanceId=event["ResourceProperties"]["InstanceId"]
                      # List command invocations for instance and document
                      document_name = event["ResourceProperties"]["SSMDocumentName"]
                      response = ssm.list_command_invocations(
                          InstanceId=instanceId,
                          Filters=[ { "key": "DocumentName", "value": document_name } ]
                      )["CommandInvocations"]

                      logger.info("Waiting for SSM bootstrap process to start. Can take around 5 minutes, polling every 30 seconds")
                      while len(response) < 1:
                          time.sleep(30)
                          response = ssm.list_command_invocations(
                              InstanceId=instanceId,
                              Filters=[ { "key": "DocumentName", "value": document_name } ]
                          )["CommandInvocations"]
                          logger.info("Waiting for SSM bootstrap process to start. Can take around 5 minutes, polling every 30 seconds")
                      
                      command_id = response[0]["CommandId"]
                      ssm_waiter = ssm.get_waiter('command_executed')
                      ssm_waiter.wait(
                          CommandId=command_id,
                          InstanceId=instanceId,
                          WaiterConfig={
                              'Delay': 30,
                              'MaxAttempts': 10
                          }
                      )

                      responseData = {
                          "Success": "Started bootstrapping for instance: "
                          + instanceId
                      }
                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.SUCCESS,
                          responseData,
                          "CustomResourceBootstrapID",
                      )
                  except Exception as e:
                      logger.error(e, exc_info=True)
                      responseData = {
                          "Error": "There was a problem bootstrapping the instance."
                      }
                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.FAILED,
                          responseData,
                          "CustomResourceBootstrapID",
                      )
              elif event["RequestType"] == "Update":
                  responseData["Message"] = {"Success": "Update event"}
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.SUCCESS,
                      responseData,
                      "CustomResourceBootstrapID",
                  )
              elif event["RequestType"] == "Delete":
                  try:
                      bucket = s3.Bucket(event["ResourceProperties"]["SSMLogBucket"])
                      bucket.objects.all().delete()
                      bucket.delete()

                      responseData = {
                          "Success": "Deleted successfully"
                      }
                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.SUCCESS,
                          responseData,
                          "CustomResourceBootstrapID",
                      )
                  except Exception as e:
                      logger.error(e, exc_info=True)
                      responseData = {
                          "Error": "There was a problem deleting the s3 bucket for SSM logs."
                      }
                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.FAILED,
                          responseData,
                          "CustomResourceBootstrapID",
                      )
              else:
                  responseData = {"Success": "Other event"}
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.SUCCESS,
                      responseData,
                      "CustomResourceBootstrapID",
                  )

  BootstrapLambdaLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: KMS Key not required for encrypting this non sensitive data
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${VSCodeInstanceBootstrapLambdaFunction}
      RetentionInDays: 7

  ########### EC2 Resources ###########
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${UserName}-${Environment}-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
      Policies:
        - PolicyName: !Sub ${UserName}-${Environment}-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                  - bedrock:InvokeModelWithResponseStream
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${UserName}-${Environment}-instance-profile
      Roles:
        - !Ref EC2Role

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: >-
        {{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id}}
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref EbsVolumeSize
      KeyName: !If
        - HasKeyPair
        - !Ref KeyPairName
        - !Ref AWS::NoValue
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          hostname: dev
          runcmd:
            - mkdir -p ${HomeFolder} && chown ubuntu:ubuntu ${HomeFolder}
      Tags:
        - Key: Name
          Value: !Sub ${UserName}-${Environment}-instance
        - Key: SSMBootstrap
          Value: True

  ########### CloudFront Resources ###########

  VSCodeInstanceCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 0
        MaxTTL: 0
        MinTTL: 0
        Name: VSCodeInstanceCachePolicy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: "false"
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  VSCodeInstanceOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        CookiesConfig:
          CookieBehavior: all
        HeadersConfig:
          HeaderBehavior: allViewer
        Name: VSCodeInstanceOriginRequestPolicy
        QueryStringsConfig:
          QueryStringBehavior: all

  VSCodeServerDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt EC2Instance.PublicDnsName
            Id: !Sub CloudFront-${AWS::StackName}
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        Enabled: "true"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: !Ref VSCodeInstanceCachePolicy
          OriginRequestPolicyId: !Ref VSCodeInstanceOriginRequestPolicy
          TargetOriginId: !Sub CloudFront-${AWS::StackName}
          ViewerProtocolPolicy: allow-all

Outputs:
  Password:
    Description: VSCode-Server Password
    Value: !Ref "AWS::AccountId"
    Export:
      Name: "Password"
  VSCodeWebUrl:
    Description: VSCode-Server Web Url
    Value: !Sub https://${VSCodeServerDistribution.DomainName}/?folder=${HomeFolder}
    Export:
      Name: "VS-Code-URL"
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
